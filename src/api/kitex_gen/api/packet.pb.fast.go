// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package api

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *Heartbeat) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Heartbeat[number], err)
}

func (x *Heartbeat) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Value, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *Command) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Command[number], err)
}

func (x *Command) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Command) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.CType, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Command) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *Command) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Message, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Command) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	var ov Command_LoginRequest
	x.Request = &ov
	var v LoginRequest
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	ov.LoginRequest = &v
	return offset, nil
}

func (x *Command) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	var ov Command_LoginReply
	x.Reply = &ov
	var v LoginReply
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	ov.LoginReply = &v
	return offset, nil
}

func (x *LoginRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_LoginRequest[number], err)
}

func (x *LoginRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.AppId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *LoginRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserSig, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *LoginRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Version, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *LoginRequest) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Os, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *LoginRequest) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.DeviceId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *LoginReply) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_LoginReply[number], err)
}

func (x *LoginReply) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.AppId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *LoginReply) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Message) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 13:
		offset, err = x.fastReadField13(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 14:
		offset, err = x.fastReadField14(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 15:
		offset, err = x.fastReadField15(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 16:
		offset, err = x.fastReadField16(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 17:
		offset, err = x.fastReadField17(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 18:
		offset, err = x.fastReadField18(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 19:
		offset, err = x.fastReadField19(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 20:
		offset, err = x.fastReadField20(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Message[number], err)
}

func (x *Message) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.MessageId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Message) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.AppId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Message) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Message) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.ConvId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Message) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.To, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Message) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.GroupId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Message) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Sequence, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Message) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.Flow, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *Message) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.NeedAck, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *Message) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.CTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Message) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.STime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Message) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	x.CType, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Message) fastReadField13(buf []byte, _type int8) (offset int, err error) {
	var v At
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.At = append(x.At, &v)
	return offset, nil
}

func (x *Message) fastReadField14(buf []byte, _type int8) (offset int, err error) {
	var v Refer
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Refer = append(x.Refer, &v)
	return offset, nil
}

func (x *Message) fastReadField15(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *Message) fastReadField16(buf []byte, _type int8) (offset int, err error) {
	x.Message, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Message) fastReadField17(buf []byte, _type int8) (offset int, err error) {
	var ov Message_Text
	x.Content = &ov
	var v Text
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	ov.Text = &v
	return offset, nil
}

func (x *Message) fastReadField18(buf []byte, _type int8) (offset int, err error) {
	var ov Message_Image
	x.Content = &ov
	var v Image
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	ov.Image = &v
	return offset, nil
}

func (x *Message) fastReadField19(buf []byte, _type int8) (offset int, err error) {
	var ov Message_Audio
	x.Content = &ov
	var v Audio
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	ov.Audio = &v
	return offset, nil
}

func (x *Message) fastReadField20(buf []byte, _type int8) (offset int, err error) {
	var ov Message_Video
	x.Content = &ov
	var v Video
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	ov.Video = &v
	return offset, nil
}

func (x *At) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_At[number], err)
}

func (x *At) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *At) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *At) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Avatar, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Refer) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Refer[number], err)
}

func (x *Refer) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Refer) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Refer) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Avatar, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Refer) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.CType, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Refer) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	var ov Refer_Text
	x.Content = &ov
	var v Text
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	ov.Text = &v
	return offset, nil
}

func (x *Refer) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	var ov Refer_Image
	x.Content = &ov
	var v Image
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	ov.Image = &v
	return offset, nil
}

func (x *Refer) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	var ov Refer_Audio
	x.Content = &ov
	var v Audio
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	ov.Audio = &v
	return offset, nil
}

func (x *Refer) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	var ov Refer_Video
	x.Content = &ov
	var v Video
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	ov.Video = &v
	return offset, nil
}

func (x *Text) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Text[number], err)
}

func (x *Text) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Text, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Image) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Image[number], err)
}

func (x *Image) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Url, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Image) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Width, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *Image) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Height, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *Audio) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Audio[number], err)
}

func (x *Audio) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Url, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Audio) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Length, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *Video) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Video[number], err)
}

func (x *Video) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Url, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Video) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Cover, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Video) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Length, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *Video) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Width, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *Video) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Height, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *Packet) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Packet[number], err)
}

func (x *Packet) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *Packet) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var ov Packet_Heartbeat
	x.Body = &ov
	var v Heartbeat
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	ov.Heartbeat = &v
	return offset, nil
}

func (x *Packet) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var ov Packet_Command
	x.Body = &ov
	var v Command
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	ov.Command = &v
	return offset, nil
}

func (x *Packet) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var ov Packet_Message
	x.Body = &ov
	var v Message
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	ov.Message = &v
	return offset, nil
}

func (x *Heartbeat) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *Heartbeat) fastWriteField1(buf []byte) (offset int) {
	if x.Value == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, x.GetValue())
	return offset
}

func (x *Command) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	return offset
}

func (x *Command) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *Command) fastWriteField2(buf []byte) (offset int) {
	if x.CType == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetCType())
	return offset
}

func (x *Command) fastWriteField3(buf []byte) (offset int) {
	if x.Code == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, x.GetCode())
	return offset
}

func (x *Command) fastWriteField4(buf []byte) (offset int) {
	if x.Message == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetMessage())
	return offset
}

func (x *Command) fastWriteField5(buf []byte) (offset int) {
	if x.GetLoginRequest() == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 5, x.GetLoginRequest())
	return offset
}

func (x *Command) fastWriteField6(buf []byte) (offset int) {
	if x.GetLoginReply() == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 6, x.GetLoginReply())
	return offset
}

func (x *LoginRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *LoginRequest) fastWriteField1(buf []byte) (offset int) {
	if x.AppId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetAppId())
	return offset
}

func (x *LoginRequest) fastWriteField2(buf []byte) (offset int) {
	if x.UserSig == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUserSig())
	return offset
}

func (x *LoginRequest) fastWriteField3(buf []byte) (offset int) {
	if x.Version == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetVersion())
	return offset
}

func (x *LoginRequest) fastWriteField4(buf []byte) (offset int) {
	if x.Os == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetOs())
	return offset
}

func (x *LoginRequest) fastWriteField5(buf []byte) (offset int) {
	if x.DeviceId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetDeviceId())
	return offset
}

func (x *LoginReply) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *LoginReply) fastWriteField1(buf []byte) (offset int) {
	if x.AppId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetAppId())
	return offset
}

func (x *LoginReply) fastWriteField2(buf []byte) (offset int) {
	if x.UserId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetUserId())
	return offset
}

func (x *Message) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	offset += x.fastWriteField13(buf[offset:])
	offset += x.fastWriteField14(buf[offset:])
	offset += x.fastWriteField15(buf[offset:])
	offset += x.fastWriteField16(buf[offset:])
	offset += x.fastWriteField17(buf[offset:])
	offset += x.fastWriteField18(buf[offset:])
	offset += x.fastWriteField19(buf[offset:])
	offset += x.fastWriteField20(buf[offset:])
	return offset
}

func (x *Message) fastWriteField1(buf []byte) (offset int) {
	if x.MessageId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetMessageId())
	return offset
}

func (x *Message) fastWriteField2(buf []byte) (offset int) {
	if x.AppId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetAppId())
	return offset
}

func (x *Message) fastWriteField3(buf []byte) (offset int) {
	if x.UserId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetUserId())
	return offset
}

func (x *Message) fastWriteField4(buf []byte) (offset int) {
	if x.ConvId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetConvId())
	return offset
}

func (x *Message) fastWriteField5(buf []byte) (offset int) {
	if x.To == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetTo())
	return offset
}

func (x *Message) fastWriteField6(buf []byte) (offset int) {
	if x.GroupId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 6, x.GetGroupId())
	return offset
}

func (x *Message) fastWriteField7(buf []byte) (offset int) {
	if x.Sequence == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetSequence())
	return offset
}

func (x *Message) fastWriteField8(buf []byte) (offset int) {
	if x.Flow == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 8, x.GetFlow())
	return offset
}

func (x *Message) fastWriteField9(buf []byte) (offset int) {
	if x.NeedAck == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 9, x.GetNeedAck())
	return offset
}

func (x *Message) fastWriteField10(buf []byte) (offset int) {
	if x.CTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 10, x.GetCTime())
	return offset
}

func (x *Message) fastWriteField11(buf []byte) (offset int) {
	if x.STime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 11, x.GetSTime())
	return offset
}

func (x *Message) fastWriteField12(buf []byte) (offset int) {
	if x.CType == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 12, x.GetCType())
	return offset
}

func (x *Message) fastWriteField13(buf []byte) (offset int) {
	if x.At == nil {
		return offset
	}
	for i := range x.GetAt() {
		offset += fastpb.WriteMessage(buf[offset:], 13, x.GetAt()[i])
	}
	return offset
}

func (x *Message) fastWriteField14(buf []byte) (offset int) {
	if x.Refer == nil {
		return offset
	}
	for i := range x.GetRefer() {
		offset += fastpb.WriteMessage(buf[offset:], 14, x.GetRefer()[i])
	}
	return offset
}

func (x *Message) fastWriteField15(buf []byte) (offset int) {
	if x.Code == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 15, x.GetCode())
	return offset
}

func (x *Message) fastWriteField16(buf []byte) (offset int) {
	if x.Message == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 16, x.GetMessage())
	return offset
}

func (x *Message) fastWriteField17(buf []byte) (offset int) {
	if x.GetText() == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 17, x.GetText())
	return offset
}

func (x *Message) fastWriteField18(buf []byte) (offset int) {
	if x.GetImage() == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 18, x.GetImage())
	return offset
}

func (x *Message) fastWriteField19(buf []byte) (offset int) {
	if x.GetAudio() == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 19, x.GetAudio())
	return offset
}

func (x *Message) fastWriteField20(buf []byte) (offset int) {
	if x.GetVideo() == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 20, x.GetVideo())
	return offset
}

func (x *At) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *At) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *At) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *At) fastWriteField3(buf []byte) (offset int) {
	if x.Avatar == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetAvatar())
	return offset
}

func (x *Refer) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	return offset
}

func (x *Refer) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *Refer) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *Refer) fastWriteField3(buf []byte) (offset int) {
	if x.Avatar == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetAvatar())
	return offset
}

func (x *Refer) fastWriteField4(buf []byte) (offset int) {
	if x.CType == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetCType())
	return offset
}

func (x *Refer) fastWriteField5(buf []byte) (offset int) {
	if x.GetText() == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 5, x.GetText())
	return offset
}

func (x *Refer) fastWriteField6(buf []byte) (offset int) {
	if x.GetImage() == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 6, x.GetImage())
	return offset
}

func (x *Refer) fastWriteField7(buf []byte) (offset int) {
	if x.GetAudio() == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 7, x.GetAudio())
	return offset
}

func (x *Refer) fastWriteField8(buf []byte) (offset int) {
	if x.GetVideo() == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 8, x.GetVideo())
	return offset
}

func (x *Text) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *Text) fastWriteField1(buf []byte) (offset int) {
	if x.Text == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetText())
	return offset
}

func (x *Image) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *Image) fastWriteField1(buf []byte) (offset int) {
	if x.Url == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUrl())
	return offset
}

func (x *Image) fastWriteField2(buf []byte) (offset int) {
	if x.Width == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, x.GetWidth())
	return offset
}

func (x *Image) fastWriteField3(buf []byte) (offset int) {
	if x.Height == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, x.GetHeight())
	return offset
}

func (x *Audio) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *Audio) fastWriteField1(buf []byte) (offset int) {
	if x.Url == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUrl())
	return offset
}

func (x *Audio) fastWriteField2(buf []byte) (offset int) {
	if x.Length == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, x.GetLength())
	return offset
}

func (x *Video) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *Video) fastWriteField1(buf []byte) (offset int) {
	if x.Url == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUrl())
	return offset
}

func (x *Video) fastWriteField2(buf []byte) (offset int) {
	if x.Cover == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetCover())
	return offset
}

func (x *Video) fastWriteField3(buf []byte) (offset int) {
	if x.Length == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, x.GetLength())
	return offset
}

func (x *Video) fastWriteField4(buf []byte) (offset int) {
	if x.Width == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, x.GetWidth())
	return offset
}

func (x *Video) fastWriteField5(buf []byte) (offset int) {
	if x.Height == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 5, x.GetHeight())
	return offset
}

func (x *Packet) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *Packet) fastWriteField1(buf []byte) (offset int) {
	if x.Type == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, x.GetType())
	return offset
}

func (x *Packet) fastWriteField2(buf []byte) (offset int) {
	if x.GetHeartbeat() == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetHeartbeat())
	return offset
}

func (x *Packet) fastWriteField3(buf []byte) (offset int) {
	if x.GetCommand() == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 3, x.GetCommand())
	return offset
}

func (x *Packet) fastWriteField4(buf []byte) (offset int) {
	if x.GetMessage() == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 4, x.GetMessage())
	return offset
}

func (x *Heartbeat) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *Heartbeat) sizeField1() (n int) {
	if x.Value == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, x.GetValue())
	return n
}

func (x *Command) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	return n
}

func (x *Command) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *Command) sizeField2() (n int) {
	if x.CType == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetCType())
	return n
}

func (x *Command) sizeField3() (n int) {
	if x.Code == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, x.GetCode())
	return n
}

func (x *Command) sizeField4() (n int) {
	if x.Message == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetMessage())
	return n
}

func (x *Command) sizeField5() (n int) {
	if x.GetLoginRequest() == nil {
		return n
	}
	n += fastpb.SizeMessage(5, x.GetLoginRequest())
	return n
}

func (x *Command) sizeField6() (n int) {
	if x.GetLoginReply() == nil {
		return n
	}
	n += fastpb.SizeMessage(6, x.GetLoginReply())
	return n
}

func (x *LoginRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *LoginRequest) sizeField1() (n int) {
	if x.AppId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetAppId())
	return n
}

func (x *LoginRequest) sizeField2() (n int) {
	if x.UserSig == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUserSig())
	return n
}

func (x *LoginRequest) sizeField3() (n int) {
	if x.Version == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetVersion())
	return n
}

func (x *LoginRequest) sizeField4() (n int) {
	if x.Os == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetOs())
	return n
}

func (x *LoginRequest) sizeField5() (n int) {
	if x.DeviceId == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetDeviceId())
	return n
}

func (x *LoginReply) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *LoginReply) sizeField1() (n int) {
	if x.AppId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetAppId())
	return n
}

func (x *LoginReply) sizeField2() (n int) {
	if x.UserId == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetUserId())
	return n
}

func (x *Message) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	n += x.sizeField12()
	n += x.sizeField13()
	n += x.sizeField14()
	n += x.sizeField15()
	n += x.sizeField16()
	n += x.sizeField17()
	n += x.sizeField18()
	n += x.sizeField19()
	n += x.sizeField20()
	return n
}

func (x *Message) sizeField1() (n int) {
	if x.MessageId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetMessageId())
	return n
}

func (x *Message) sizeField2() (n int) {
	if x.AppId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetAppId())
	return n
}

func (x *Message) sizeField3() (n int) {
	if x.UserId == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetUserId())
	return n
}

func (x *Message) sizeField4() (n int) {
	if x.ConvId == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetConvId())
	return n
}

func (x *Message) sizeField5() (n int) {
	if x.To == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetTo())
	return n
}

func (x *Message) sizeField6() (n int) {
	if x.GroupId == 0 {
		return n
	}
	n += fastpb.SizeInt64(6, x.GetGroupId())
	return n
}

func (x *Message) sizeField7() (n int) {
	if x.Sequence == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetSequence())
	return n
}

func (x *Message) sizeField8() (n int) {
	if x.Flow == 0 {
		return n
	}
	n += fastpb.SizeInt32(8, x.GetFlow())
	return n
}

func (x *Message) sizeField9() (n int) {
	if x.NeedAck == 0 {
		return n
	}
	n += fastpb.SizeInt32(9, x.GetNeedAck())
	return n
}

func (x *Message) sizeField10() (n int) {
	if x.CTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(10, x.GetCTime())
	return n
}

func (x *Message) sizeField11() (n int) {
	if x.STime == 0 {
		return n
	}
	n += fastpb.SizeInt64(11, x.GetSTime())
	return n
}

func (x *Message) sizeField12() (n int) {
	if x.CType == "" {
		return n
	}
	n += fastpb.SizeString(12, x.GetCType())
	return n
}

func (x *Message) sizeField13() (n int) {
	if x.At == nil {
		return n
	}
	for i := range x.GetAt() {
		n += fastpb.SizeMessage(13, x.GetAt()[i])
	}
	return n
}

func (x *Message) sizeField14() (n int) {
	if x.Refer == nil {
		return n
	}
	for i := range x.GetRefer() {
		n += fastpb.SizeMessage(14, x.GetRefer()[i])
	}
	return n
}

func (x *Message) sizeField15() (n int) {
	if x.Code == 0 {
		return n
	}
	n += fastpb.SizeInt32(15, x.GetCode())
	return n
}

func (x *Message) sizeField16() (n int) {
	if x.Message == "" {
		return n
	}
	n += fastpb.SizeString(16, x.GetMessage())
	return n
}

func (x *Message) sizeField17() (n int) {
	if x.GetText() == nil {
		return n
	}
	n += fastpb.SizeMessage(17, x.GetText())
	return n
}

func (x *Message) sizeField18() (n int) {
	if x.GetImage() == nil {
		return n
	}
	n += fastpb.SizeMessage(18, x.GetImage())
	return n
}

func (x *Message) sizeField19() (n int) {
	if x.GetAudio() == nil {
		return n
	}
	n += fastpb.SizeMessage(19, x.GetAudio())
	return n
}

func (x *Message) sizeField20() (n int) {
	if x.GetVideo() == nil {
		return n
	}
	n += fastpb.SizeMessage(20, x.GetVideo())
	return n
}

func (x *At) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *At) sizeField1() (n int) {
	if x.UserId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetUserId())
	return n
}

func (x *At) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *At) sizeField3() (n int) {
	if x.Avatar == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetAvatar())
	return n
}

func (x *Refer) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	return n
}

func (x *Refer) sizeField1() (n int) {
	if x.UserId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetUserId())
	return n
}

func (x *Refer) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *Refer) sizeField3() (n int) {
	if x.Avatar == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetAvatar())
	return n
}

func (x *Refer) sizeField4() (n int) {
	if x.CType == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetCType())
	return n
}

func (x *Refer) sizeField5() (n int) {
	if x.GetText() == nil {
		return n
	}
	n += fastpb.SizeMessage(5, x.GetText())
	return n
}

func (x *Refer) sizeField6() (n int) {
	if x.GetImage() == nil {
		return n
	}
	n += fastpb.SizeMessage(6, x.GetImage())
	return n
}

func (x *Refer) sizeField7() (n int) {
	if x.GetAudio() == nil {
		return n
	}
	n += fastpb.SizeMessage(7, x.GetAudio())
	return n
}

func (x *Refer) sizeField8() (n int) {
	if x.GetVideo() == nil {
		return n
	}
	n += fastpb.SizeMessage(8, x.GetVideo())
	return n
}

func (x *Text) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *Text) sizeField1() (n int) {
	if x.Text == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetText())
	return n
}

func (x *Image) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *Image) sizeField1() (n int) {
	if x.Url == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUrl())
	return n
}

func (x *Image) sizeField2() (n int) {
	if x.Width == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, x.GetWidth())
	return n
}

func (x *Image) sizeField3() (n int) {
	if x.Height == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, x.GetHeight())
	return n
}

func (x *Audio) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *Audio) sizeField1() (n int) {
	if x.Url == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUrl())
	return n
}

func (x *Audio) sizeField2() (n int) {
	if x.Length == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, x.GetLength())
	return n
}

func (x *Video) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *Video) sizeField1() (n int) {
	if x.Url == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUrl())
	return n
}

func (x *Video) sizeField2() (n int) {
	if x.Cover == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetCover())
	return n
}

func (x *Video) sizeField3() (n int) {
	if x.Length == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, x.GetLength())
	return n
}

func (x *Video) sizeField4() (n int) {
	if x.Width == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, x.GetWidth())
	return n
}

func (x *Video) sizeField5() (n int) {
	if x.Height == 0 {
		return n
	}
	n += fastpb.SizeInt32(5, x.GetHeight())
	return n
}

func (x *Packet) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *Packet) sizeField1() (n int) {
	if x.Type == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, x.GetType())
	return n
}

func (x *Packet) sizeField2() (n int) {
	if x.GetHeartbeat() == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetHeartbeat())
	return n
}

func (x *Packet) sizeField3() (n int) {
	if x.GetCommand() == nil {
		return n
	}
	n += fastpb.SizeMessage(3, x.GetCommand())
	return n
}

func (x *Packet) sizeField4() (n int) {
	if x.GetMessage() == nil {
		return n
	}
	n += fastpb.SizeMessage(4, x.GetMessage())
	return n
}

var fieldIDToName_Heartbeat = map[int32]string{
	1: "Value",
}

var fieldIDToName_Command = map[int32]string{
	1: "Id",
	2: "CType",
	3: "Code",
	4: "Message",
	5: "LoginRequest",
	6: "LoginReply",
}

var fieldIDToName_LoginRequest = map[int32]string{
	1: "AppId",
	2: "UserSig",
	3: "Version",
	4: "Os",
	5: "DeviceId",
}

var fieldIDToName_LoginReply = map[int32]string{
	1: "AppId",
	2: "UserId",
}

var fieldIDToName_Message = map[int32]string{
	1:  "MessageId",
	2:  "AppId",
	3:  "UserId",
	4:  "ConvId",
	5:  "To",
	6:  "GroupId",
	7:  "Sequence",
	8:  "Flow",
	9:  "NeedAck",
	10: "CTime",
	11: "STime",
	12: "CType",
	13: "At",
	14: "Refer",
	15: "Code",
	16: "Message",
	17: "Text",
	18: "Image",
	19: "Audio",
	20: "Video",
}

var fieldIDToName_At = map[int32]string{
	1: "UserId",
	2: "Name",
	3: "Avatar",
}

var fieldIDToName_Refer = map[int32]string{
	1: "UserId",
	2: "Name",
	3: "Avatar",
	4: "CType",
	5: "Text",
	6: "Image",
	7: "Audio",
	8: "Video",
}

var fieldIDToName_Text = map[int32]string{
	1: "Text",
}

var fieldIDToName_Image = map[int32]string{
	1: "Url",
	2: "Width",
	3: "Height",
}

var fieldIDToName_Audio = map[int32]string{
	1: "Url",
	2: "Length",
}

var fieldIDToName_Video = map[int32]string{
	1: "Url",
	2: "Cover",
	3: "Length",
	4: "Width",
	5: "Height",
}

var fieldIDToName_Packet = map[int32]string{
	1: "Type",
	2: "Heartbeat",
	3: "Command",
	4: "Message",
}
