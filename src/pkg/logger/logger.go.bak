package logger

import (
	"github.com/natefinch/lumberjack"
	"go.uber.org/zap"
	"go.uber.org/zap/zapcore"
	"os"
)

const (
	YYYYMMDDHHMMSS = "2006-01-02 15:04:05"
)

type EncodeType string

const (
	ConsoleEncode EncodeType = "console"
	JSONEncode    EncodeType = "json"
)

var (
	Z       *zap.SugaredLogger
	tracing = false
)

type Config struct {
	File       string     `json:"file"`
	TracerName string     `json:"tracerName"`
	Level      int8       `json:"level"`
	Encode     EncodeType `json:"encode"`
	TimeFormat string     `json:"timeFormat"`
}

var defaultConfig = Config{
	File:       "./log/logger.log",
	TracerName: "",
	Level:      0,
	Encode:     JSONEncode,
	TimeFormat: YYYYMMDDHHMMSS,
}

func getDefaultConfig(c *Config) *Config {
	if c == nil {
		return &defaultConfig
	}

	if c.File == "" {
		c.File = "logger.log"
	}

	if c.Encode == "" {
		c.Encode = JSONEncode
	}

	if c.TimeFormat == "" {
		c.TimeFormat = YYYYMMDDHHMMSS
	}

	return c
}

func Init(c *Config) *zap.SugaredLogger {

	c = getDefaultConfig(c)

	writeSyncer := Writer(c.File)
	encoder := Encoder(c.Encode, c.TimeFormat)

	if c.Level == 0 {
		c.Level = int8(zapcore.InfoLevel)
	}

	core := zapcore.NewCore(encoder, writeSyncer, zapcore.Level(c.Level))
	zp := zap.New(core, zap.AddCaller(), zap.AddCallerSkip(1))

	Z = zp.Sugar()

	if c.TracerName != "" {
		tracing = true
		InitTracer(c.TracerName)
	}

	return Z
}

func Encoder(et EncodeType, format string) zapcore.Encoder {

	if format == "" {
		format = YYYYMMDDHHMMSS
	}

	encoderConfig := zap.NewProductionEncoderConfig()
	encoderConfig.TimeKey = "t"
	encoderConfig.LevelKey = "lvl"
	encoderConfig.NameKey = "log"
	encoderConfig.MessageKey = "m"
	encoderConfig.StacktraceKey = "s"
	encoderConfig.CallerKey = "c"
	encoderConfig.EncodeTime = zapcore.TimeEncoderOfLayout(format)
	encoderConfig.EncodeLevel = zapcore.CapitalLevelEncoder
	encoderConfig.EncodeCaller = zapcore.ShortCallerEncoder
	encoderConfig.ConsoleSeparator = " "

	switch et {
	case JSONEncode:
		return zapcore.NewJSONEncoder(encoderConfig)
	case ConsoleEncode:
		return zapcore.NewConsoleEncoder(encoderConfig)
	default:
		return zapcore.NewJSONEncoder(encoderConfig)
	}
}

func Writer(file string) zapcore.WriteSyncer {
	lumberJackLogger := &lumberjack.Logger{
		Filename:   file,
		MaxSize:    10, // 10M
		MaxBackups: 5,  // 5个
		MaxAge:     30, // 最多30天
		Compress:   false,
	}
	return zapcore.NewMultiWriteSyncer(
		zapcore.AddSync(os.Stdout),
		zapcore.AddSync(lumberJackLogger))
}

func Level() zapcore.Level {
	return Z.Level()
}

func With(args ...any) *zap.SugaredLogger {
	return Z.With(args...)

}

func Debug(args ...any) {
	Z.Debug(args...)
}

func Info(args ...any) {
	Z.Info(args...)
}

func Warn(args ...any) {
	Z.Warn(args...)
}

func Error(args ...any) {
	Z.Error(args...)
}

func DPanic(args ...any) {
	Z.DPanic(args...)
}

func Panic(args ...any) {
	Z.Panic(args...)
}

func Fatal(args ...any) {
	Z.Fatal(args...)
}

func Debugf(template string, args ...any) {
	Z.Debugf(template, args...)
}

func Infof(template string, args ...any) {
	Z.Infof(template, args...)
}

func Warnf(template string, args ...any) {
	Z.Warnf(template, args...)

}

func Errorf(template string, args ...any) {
	Z.Errorf(template, args...)

}

func DPanicf(template string, args ...any) {
	Z.DPanicf(template, args...)

}

func Panicf(template string, args ...any) {
	Z.Panicf(template, args...)

}

func Fatalf(template string, args ...any) {
	Z.Fatalf(template, args...)

}

func Debugw(msg string, keysAndValues ...any) {
	Z.Debugw(msg, keysAndValues...)

}

func Infow(msg string, keysAndValues ...any) {
	Z.Infow(msg, keysAndValues...)
}

func Warnw(msg string, keysAndValues ...any) {
	Z.Warnw(msg, keysAndValues...)
}

func Errorw(msg string, keysAndValues ...any) {
	Z.Errorw(msg, keysAndValues...)
}

func DPanicw(msg string, keysAndValues ...any) {
	Z.DPanicw(msg, keysAndValues...)
}

func Panicw(msg string, keysAndValues ...any) {
	Z.Panicw(msg, keysAndValues...)
}

func Fatalw(msg string, keysAndValues ...any) {
	Z.Fatalw(msg, keysAndValues...)
}

func IsDebugEnable() bool {
	return Z.Level() == zapcore.DebugLevel
}
