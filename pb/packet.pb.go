//
//
//╰$ cd broker/pb
//╰$ protoc --go_out=. packet.proto
//╰$ protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative packet.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v4.25.3
// source: packet.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Packet struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Type  int32                  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	// Types that are valid to be assigned to Body:
	//
	//	*Packet_HeartbeatBody
	//	*Packet_CommandBody
	//	*Packet_MessageBody
	Body          isPacket_Body `protobuf_oneof:"body"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Packet) Reset() {
	*x = Packet{}
	mi := &file_packet_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Packet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Packet) ProtoMessage() {}

func (x *Packet) ProtoReflect() protoreflect.Message {
	mi := &file_packet_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Packet.ProtoReflect.Descriptor instead.
func (*Packet) Descriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{0}
}

func (x *Packet) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Packet) GetBody() isPacket_Body {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *Packet) GetHeartbeatBody() *HeartbeatBody {
	if x != nil {
		if x, ok := x.Body.(*Packet_HeartbeatBody); ok {
			return x.HeartbeatBody
		}
	}
	return nil
}

func (x *Packet) GetCommandBody() *CommandBody {
	if x != nil {
		if x, ok := x.Body.(*Packet_CommandBody); ok {
			return x.CommandBody
		}
	}
	return nil
}

func (x *Packet) GetMessageBody() *MessageBody {
	if x != nil {
		if x, ok := x.Body.(*Packet_MessageBody); ok {
			return x.MessageBody
		}
	}
	return nil
}

type isPacket_Body interface {
	isPacket_Body()
}

type Packet_HeartbeatBody struct {
	HeartbeatBody *HeartbeatBody `protobuf:"bytes,2,opt,name=heartbeatBody,proto3,oneof"`
}

type Packet_CommandBody struct {
	CommandBody *CommandBody `protobuf:"bytes,3,opt,name=commandBody,proto3,oneof"`
}

type Packet_MessageBody struct {
	MessageBody *MessageBody `protobuf:"bytes,4,opt,name=messageBody,proto3,oneof"`
}

func (*Packet_HeartbeatBody) isPacket_Body() {}

func (*Packet_CommandBody) isPacket_Body() {}

func (*Packet_MessageBody) isPacket_Body() {}

type HeartbeatBody struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         int32                  `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HeartbeatBody) Reset() {
	*x = HeartbeatBody{}
	mi := &file_packet_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeartbeatBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatBody) ProtoMessage() {}

func (x *HeartbeatBody) ProtoReflect() protoreflect.Message {
	mi := &file_packet_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatBody.ProtoReflect.Descriptor instead.
func (*HeartbeatBody) Descriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{1}
}

func (x *HeartbeatBody) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type CommandBody struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Id      string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CType   string                 `protobuf:"bytes,2,opt,name=cType,proto3" json:"cType,omitempty"`
	Code    int32                  `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"`
	Message string                 `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	// Types that are valid to be assigned to Request:
	//
	//	*CommandBody_LoginRequest
	Request isCommandBody_Request `protobuf_oneof:"request"`
	// Types that are valid to be assigned to Reply:
	//
	//	*CommandBody_LoginReply
	Reply         isCommandBody_Reply `protobuf_oneof:"reply"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommandBody) Reset() {
	*x = CommandBody{}
	mi := &file_packet_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandBody) ProtoMessage() {}

func (x *CommandBody) ProtoReflect() protoreflect.Message {
	mi := &file_packet_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandBody.ProtoReflect.Descriptor instead.
func (*CommandBody) Descriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{2}
}

func (x *CommandBody) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CommandBody) GetCType() string {
	if x != nil {
		return x.CType
	}
	return ""
}

func (x *CommandBody) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CommandBody) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CommandBody) GetRequest() isCommandBody_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *CommandBody) GetLoginRequest() *LoginRequest {
	if x != nil {
		if x, ok := x.Request.(*CommandBody_LoginRequest); ok {
			return x.LoginRequest
		}
	}
	return nil
}

func (x *CommandBody) GetReply() isCommandBody_Reply {
	if x != nil {
		return x.Reply
	}
	return nil
}

func (x *CommandBody) GetLoginReply() *LoginReply {
	if x != nil {
		if x, ok := x.Reply.(*CommandBody_LoginReply); ok {
			return x.LoginReply
		}
	}
	return nil
}

type isCommandBody_Request interface {
	isCommandBody_Request()
}

type CommandBody_LoginRequest struct {
	LoginRequest *LoginRequest `protobuf:"bytes,5,opt,name=loginRequest,proto3,oneof"`
}

func (*CommandBody_LoginRequest) isCommandBody_Request() {}

type isCommandBody_Reply interface {
	isCommandBody_Reply()
}

type CommandBody_LoginReply struct {
	LoginReply *LoginReply `protobuf:"bytes,6,opt,name=loginReply,proto3,oneof"`
}

func (*CommandBody_LoginReply) isCommandBody_Reply() {}

type MessageBody struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	MessageId string                 `protobuf:"bytes,1,opt,name=messageId,proto3" json:"messageId,omitempty"`
	AppId     string                 `protobuf:"bytes,2,opt,name=appId,proto3" json:"appId,omitempty"`
	UserId    int64                  `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	ConvId    string                 `protobuf:"bytes,4,opt,name=convId,proto3" json:"convId,omitempty"`
	To        int64                  `protobuf:"varint,5,opt,name=to,proto3" json:"to,omitempty"`
	GroupId   int64                  `protobuf:"varint,6,opt,name=groupId,proto3" json:"groupId,omitempty"`
	Sequence  int64                  `protobuf:"varint,7,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Flow      int32                  `protobuf:"varint,8,opt,name=flow,proto3" json:"flow,omitempty"`
	NeedAck   int32                  `protobuf:"varint,9,opt,name=needAck,proto3" json:"needAck,omitempty"`
	CTime     int64                  `protobuf:"varint,10,opt,name=cTime,proto3" json:"cTime,omitempty"`
	STime     int64                  `protobuf:"varint,11,opt,name=sTime,proto3" json:"sTime,omitempty"`
	CType     string                 `protobuf:"bytes,12,opt,name=cType,proto3" json:"cType,omitempty"`
	At        []*At                  `protobuf:"bytes,13,rep,name=at,proto3" json:"at,omitempty"`
	Refer     []*Refer               `protobuf:"bytes,14,rep,name=refer,proto3" json:"refer,omitempty"`
	Code      int32                  `protobuf:"varint,15,opt,name=code,proto3" json:"code,omitempty"`
	Message   string                 `protobuf:"bytes,16,opt,name=message,proto3" json:"message,omitempty"`
	// Types that are valid to be assigned to Content:
	//
	//	*MessageBody_TextContent
	//	*MessageBody_ImageContent
	//	*MessageBody_AudioContent
	//	*MessageBody_VideoContent
	Content       isMessageBody_Content `protobuf_oneof:"content"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageBody) Reset() {
	*x = MessageBody{}
	mi := &file_packet_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageBody) ProtoMessage() {}

func (x *MessageBody) ProtoReflect() protoreflect.Message {
	mi := &file_packet_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageBody.ProtoReflect.Descriptor instead.
func (*MessageBody) Descriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{3}
}

func (x *MessageBody) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *MessageBody) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *MessageBody) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MessageBody) GetConvId() string {
	if x != nil {
		return x.ConvId
	}
	return ""
}

func (x *MessageBody) GetTo() int64 {
	if x != nil {
		return x.To
	}
	return 0
}

func (x *MessageBody) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *MessageBody) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *MessageBody) GetFlow() int32 {
	if x != nil {
		return x.Flow
	}
	return 0
}

func (x *MessageBody) GetNeedAck() int32 {
	if x != nil {
		return x.NeedAck
	}
	return 0
}

func (x *MessageBody) GetCTime() int64 {
	if x != nil {
		return x.CTime
	}
	return 0
}

func (x *MessageBody) GetSTime() int64 {
	if x != nil {
		return x.STime
	}
	return 0
}

func (x *MessageBody) GetCType() string {
	if x != nil {
		return x.CType
	}
	return ""
}

func (x *MessageBody) GetAt() []*At {
	if x != nil {
		return x.At
	}
	return nil
}

func (x *MessageBody) GetRefer() []*Refer {
	if x != nil {
		return x.Refer
	}
	return nil
}

func (x *MessageBody) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *MessageBody) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MessageBody) GetContent() isMessageBody_Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *MessageBody) GetTextContent() *TextContent {
	if x != nil {
		if x, ok := x.Content.(*MessageBody_TextContent); ok {
			return x.TextContent
		}
	}
	return nil
}

func (x *MessageBody) GetImageContent() *ImageContent {
	if x != nil {
		if x, ok := x.Content.(*MessageBody_ImageContent); ok {
			return x.ImageContent
		}
	}
	return nil
}

func (x *MessageBody) GetAudioContent() *AudioContent {
	if x != nil {
		if x, ok := x.Content.(*MessageBody_AudioContent); ok {
			return x.AudioContent
		}
	}
	return nil
}

func (x *MessageBody) GetVideoContent() *VideoContent {
	if x != nil {
		if x, ok := x.Content.(*MessageBody_VideoContent); ok {
			return x.VideoContent
		}
	}
	return nil
}

type isMessageBody_Content interface {
	isMessageBody_Content()
}

type MessageBody_TextContent struct {
	TextContent *TextContent `protobuf:"bytes,17,opt,name=textContent,proto3,oneof"`
}

type MessageBody_ImageContent struct {
	ImageContent *ImageContent `protobuf:"bytes,18,opt,name=imageContent,proto3,oneof"`
}

type MessageBody_AudioContent struct {
	AudioContent *AudioContent `protobuf:"bytes,19,opt,name=audioContent,proto3,oneof"`
}

type MessageBody_VideoContent struct {
	VideoContent *VideoContent `protobuf:"bytes,20,opt,name=videoContent,proto3,oneof"`
}

func (*MessageBody_TextContent) isMessageBody_Content() {}

func (*MessageBody_ImageContent) isMessageBody_Content() {}

func (*MessageBody_AudioContent) isMessageBody_Content() {}

func (*MessageBody_VideoContent) isMessageBody_Content() {}

type At struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Avatar        string                 `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *At) Reset() {
	*x = At{}
	mi := &file_packet_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *At) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*At) ProtoMessage() {}

func (x *At) ProtoReflect() protoreflect.Message {
	mi := &file_packet_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use At.ProtoReflect.Descriptor instead.
func (*At) Descriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{4}
}

func (x *At) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *At) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *At) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

type Refer struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	UserId int64                  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Name   string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Avatar string                 `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
	CType  string                 `protobuf:"bytes,4,opt,name=cType,proto3" json:"cType,omitempty"`
	// Types that are valid to be assigned to Content:
	//
	//	*Refer_TextContent
	//	*Refer_ImageContent
	//	*Refer_AudioContent
	//	*Refer_VideoContent
	Content       isRefer_Content `protobuf_oneof:"content"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Refer) Reset() {
	*x = Refer{}
	mi := &file_packet_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Refer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Refer) ProtoMessage() {}

func (x *Refer) ProtoReflect() protoreflect.Message {
	mi := &file_packet_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Refer.ProtoReflect.Descriptor instead.
func (*Refer) Descriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{5}
}

func (x *Refer) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Refer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Refer) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *Refer) GetCType() string {
	if x != nil {
		return x.CType
	}
	return ""
}

func (x *Refer) GetContent() isRefer_Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Refer) GetTextContent() *TextContent {
	if x != nil {
		if x, ok := x.Content.(*Refer_TextContent); ok {
			return x.TextContent
		}
	}
	return nil
}

func (x *Refer) GetImageContent() *ImageContent {
	if x != nil {
		if x, ok := x.Content.(*Refer_ImageContent); ok {
			return x.ImageContent
		}
	}
	return nil
}

func (x *Refer) GetAudioContent() *AudioContent {
	if x != nil {
		if x, ok := x.Content.(*Refer_AudioContent); ok {
			return x.AudioContent
		}
	}
	return nil
}

func (x *Refer) GetVideoContent() *VideoContent {
	if x != nil {
		if x, ok := x.Content.(*Refer_VideoContent); ok {
			return x.VideoContent
		}
	}
	return nil
}

type isRefer_Content interface {
	isRefer_Content()
}

type Refer_TextContent struct {
	TextContent *TextContent `protobuf:"bytes,5,opt,name=textContent,proto3,oneof"`
}

type Refer_ImageContent struct {
	ImageContent *ImageContent `protobuf:"bytes,6,opt,name=imageContent,proto3,oneof"`
}

type Refer_AudioContent struct {
	AudioContent *AudioContent `protobuf:"bytes,7,opt,name=audioContent,proto3,oneof"`
}

type Refer_VideoContent struct {
	VideoContent *VideoContent `protobuf:"bytes,8,opt,name=videoContent,proto3,oneof"`
}

func (*Refer_TextContent) isRefer_Content() {}

func (*Refer_ImageContent) isRefer_Content() {}

func (*Refer_AudioContent) isRefer_Content() {}

func (*Refer_VideoContent) isRefer_Content() {}

type TextContent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Text          string                 `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TextContent) Reset() {
	*x = TextContent{}
	mi := &file_packet_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TextContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextContent) ProtoMessage() {}

func (x *TextContent) ProtoReflect() protoreflect.Message {
	mi := &file_packet_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextContent.ProtoReflect.Descriptor instead.
func (*TextContent) Descriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{6}
}

func (x *TextContent) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type ImageContent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Width         int32                  `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
	Height        int32                  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImageContent) Reset() {
	*x = ImageContent{}
	mi := &file_packet_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageContent) ProtoMessage() {}

func (x *ImageContent) ProtoReflect() protoreflect.Message {
	mi := &file_packet_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageContent.ProtoReflect.Descriptor instead.
func (*ImageContent) Descriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{7}
}

func (x *ImageContent) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ImageContent) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *ImageContent) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type AudioContent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Length        int32                  `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AudioContent) Reset() {
	*x = AudioContent{}
	mi := &file_packet_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudioContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioContent) ProtoMessage() {}

func (x *AudioContent) ProtoReflect() protoreflect.Message {
	mi := &file_packet_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioContent.ProtoReflect.Descriptor instead.
func (*AudioContent) Descriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{8}
}

func (x *AudioContent) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *AudioContent) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

type VideoContent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Cover         string                 `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover,omitempty"`
	Length        int32                  `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	Width         int32                  `protobuf:"varint,4,opt,name=width,proto3" json:"width,omitempty"`
	Height        int32                  `protobuf:"varint,5,opt,name=height,proto3" json:"height,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VideoContent) Reset() {
	*x = VideoContent{}
	mi := &file_packet_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VideoContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoContent) ProtoMessage() {}

func (x *VideoContent) ProtoReflect() protoreflect.Message {
	mi := &file_packet_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoContent.ProtoReflect.Descriptor instead.
func (*VideoContent) Descriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{9}
}

func (x *VideoContent) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *VideoContent) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *VideoContent) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *VideoContent) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *VideoContent) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type LoginRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AppId         string                 `protobuf:"bytes,1,opt,name=appId,proto3" json:"appId,omitempty"`
	UserSig       string                 `protobuf:"bytes,2,opt,name=userSig,proto3" json:"userSig,omitempty"`
	Version       string                 `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Os            int32                  `protobuf:"varint,4,opt,name=os,proto3" json:"os,omitempty"`
	PushDeviceId  string                 `protobuf:"bytes,5,opt,name=pushDeviceId,proto3" json:"pushDeviceId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoginRequest) Reset() {
	*x = LoginRequest{}
	mi := &file_packet_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRequest) ProtoMessage() {}

func (x *LoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_packet_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRequest.ProtoReflect.Descriptor instead.
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{10}
}

func (x *LoginRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *LoginRequest) GetUserSig() string {
	if x != nil {
		return x.UserSig
	}
	return ""
}

func (x *LoginRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *LoginRequest) GetOs() int32 {
	if x != nil {
		return x.Os
	}
	return 0
}

func (x *LoginRequest) GetPushDeviceId() string {
	if x != nil {
		return x.PushDeviceId
	}
	return ""
}

type LoginReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AppId         string                 `protobuf:"bytes,1,opt,name=appId,proto3" json:"appId,omitempty"`
	UserId        int64                  `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoginReply) Reset() {
	*x = LoginReply{}
	mi := &file_packet_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoginReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginReply) ProtoMessage() {}

func (x *LoginReply) ProtoReflect() protoreflect.Message {
	mi := &file_packet_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginReply.ProtoReflect.Descriptor instead.
func (*LoginReply) Descriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{11}
}

func (x *LoginReply) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *LoginReply) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type MQMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Count         int32                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	UserIds       []int64                `protobuf:"varint,3,rep,packed,name=userIds,proto3" json:"userIds,omitempty"`
	UserLabels    []string               `protobuf:"bytes,4,rep,name=userLabels,proto3" json:"userLabels,omitempty"`
	Message       *MessageBody           `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MQMessage) Reset() {
	*x = MQMessage{}
	mi := &file_packet_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MQMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MQMessage) ProtoMessage() {}

func (x *MQMessage) ProtoReflect() protoreflect.Message {
	mi := &file_packet_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MQMessage.ProtoReflect.Descriptor instead.
func (*MQMessage) Descriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{12}
}

func (x *MQMessage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MQMessage) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *MQMessage) GetUserIds() []int64 {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *MQMessage) GetUserLabels() []string {
	if x != nil {
		return x.UserLabels
	}
	return nil
}

func (x *MQMessage) GetMessage() *MessageBody {
	if x != nil {
		return x.Message
	}
	return nil
}

type ApiResult struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Code    int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Types that are valid to be assigned to Data:
	//
	//	*ApiResult_LoginReply
	Data          isApiResult_Data `protobuf_oneof:"data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiResult) Reset() {
	*x = ApiResult{}
	mi := &file_packet_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiResult) ProtoMessage() {}

func (x *ApiResult) ProtoReflect() protoreflect.Message {
	mi := &file_packet_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiResult.ProtoReflect.Descriptor instead.
func (*ApiResult) Descriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{13}
}

func (x *ApiResult) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ApiResult) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ApiResult) GetData() isApiResult_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ApiResult) GetLoginReply() *LoginReply {
	if x != nil {
		if x, ok := x.Data.(*ApiResult_LoginReply); ok {
			return x.LoginReply
		}
	}
	return nil
}

type isApiResult_Data interface {
	isApiResult_Data()
}

type ApiResult_LoginReply struct {
	LoginReply *LoginReply `protobuf:"bytes,3,opt,name=loginReply,proto3,oneof"`
}

func (*ApiResult_LoginReply) isApiResult_Data() {}

var File_packet_proto protoreflect.FileDescriptor

var file_packet_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02,
	0x70, 0x62, 0x22, 0xc9, 0x01, 0x0a, 0x06, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x39, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x42, 0x6f,
	0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x68,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x33, 0x0a, 0x0b,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0x6f,
	0x64, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0x6f, 0x64,
	0x79, 0x12, 0x33, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x06, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x25,
	0x0a, 0x0d, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xdf, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x0c, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x30, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x01, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x07,
	0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x22, 0xf6, 0x04, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x76, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x76, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x74,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x65, 0x64, 0x41, 0x63, 0x6b,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x65, 0x65, 0x64, 0x41, 0x63, 0x6b, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x02, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e,
	0x70, 0x62, 0x2e, 0x41, 0x74, 0x52, 0x02, 0x61, 0x74, 0x12, 0x1f, 0x0a, 0x05, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x52, 0x05, 0x72, 0x65, 0x66, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x74, 0x65, 0x78, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x62, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x0b, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a,
	0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62,
	0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a,
	0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x22, 0x48, 0x0a, 0x02, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x22, 0xc9, 0x02, 0x0a, 0x05, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33,
	0x0a, 0x0b, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0c, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x21, 0x0a, 0x0b, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x4e, 0x0a, 0x0c, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x38, 0x0a, 0x0c, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x22, 0x7c, 0x0a, 0x0c, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x22, 0x8c, 0x01, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x53, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x53,
	0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x70, 0x75, 0x73, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x75, 0x73, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x22, 0x3a, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x96, 0x01, 0x0a,
	0x09, 0x4d, 0x51, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x73, 0x0a, 0x09, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x30, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x35, 0x0a, 0x07, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x69, 0x12, 0x2a, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x10,
	0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x00, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_packet_proto_rawDescOnce sync.Once
	file_packet_proto_rawDescData = file_packet_proto_rawDesc
)

func file_packet_proto_rawDescGZIP() []byte {
	file_packet_proto_rawDescOnce.Do(func() {
		file_packet_proto_rawDescData = protoimpl.X.CompressGZIP(file_packet_proto_rawDescData)
	})
	return file_packet_proto_rawDescData
}

var file_packet_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_packet_proto_goTypes = []any{
	(*Packet)(nil),        // 0: pb.Packet
	(*HeartbeatBody)(nil), // 1: pb.HeartbeatBody
	(*CommandBody)(nil),   // 2: pb.CommandBody
	(*MessageBody)(nil),   // 3: pb.MessageBody
	(*At)(nil),            // 4: pb.At
	(*Refer)(nil),         // 5: pb.Refer
	(*TextContent)(nil),   // 6: pb.TextContent
	(*ImageContent)(nil),  // 7: pb.ImageContent
	(*AudioContent)(nil),  // 8: pb.AudioContent
	(*VideoContent)(nil),  // 9: pb.VideoContent
	(*LoginRequest)(nil),  // 10: pb.LoginRequest
	(*LoginReply)(nil),    // 11: pb.LoginReply
	(*MQMessage)(nil),     // 12: pb.MQMessage
	(*ApiResult)(nil),     // 13: pb.ApiResult
}
var file_packet_proto_depIdxs = []int32{
	1,  // 0: pb.Packet.heartbeatBody:type_name -> pb.HeartbeatBody
	2,  // 1: pb.Packet.commandBody:type_name -> pb.CommandBody
	3,  // 2: pb.Packet.messageBody:type_name -> pb.MessageBody
	10, // 3: pb.CommandBody.loginRequest:type_name -> pb.LoginRequest
	11, // 4: pb.CommandBody.loginReply:type_name -> pb.LoginReply
	4,  // 5: pb.MessageBody.at:type_name -> pb.At
	5,  // 6: pb.MessageBody.refer:type_name -> pb.Refer
	6,  // 7: pb.MessageBody.textContent:type_name -> pb.TextContent
	7,  // 8: pb.MessageBody.imageContent:type_name -> pb.ImageContent
	8,  // 9: pb.MessageBody.audioContent:type_name -> pb.AudioContent
	9,  // 10: pb.MessageBody.videoContent:type_name -> pb.VideoContent
	6,  // 11: pb.Refer.textContent:type_name -> pb.TextContent
	7,  // 12: pb.Refer.imageContent:type_name -> pb.ImageContent
	8,  // 13: pb.Refer.audioContent:type_name -> pb.AudioContent
	9,  // 14: pb.Refer.videoContent:type_name -> pb.VideoContent
	3,  // 15: pb.MQMessage.message:type_name -> pb.MessageBody
	11, // 16: pb.ApiResult.loginReply:type_name -> pb.LoginReply
	10, // 17: pb.UserApi.Login:input_type -> pb.LoginRequest
	13, // 18: pb.UserApi.Login:output_type -> pb.ApiResult
	18, // [18:19] is the sub-list for method output_type
	17, // [17:18] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_packet_proto_init() }
func file_packet_proto_init() {
	if File_packet_proto != nil {
		return
	}
	file_packet_proto_msgTypes[0].OneofWrappers = []any{
		(*Packet_HeartbeatBody)(nil),
		(*Packet_CommandBody)(nil),
		(*Packet_MessageBody)(nil),
	}
	file_packet_proto_msgTypes[2].OneofWrappers = []any{
		(*CommandBody_LoginRequest)(nil),
		(*CommandBody_LoginReply)(nil),
	}
	file_packet_proto_msgTypes[3].OneofWrappers = []any{
		(*MessageBody_TextContent)(nil),
		(*MessageBody_ImageContent)(nil),
		(*MessageBody_AudioContent)(nil),
		(*MessageBody_VideoContent)(nil),
	}
	file_packet_proto_msgTypes[5].OneofWrappers = []any{
		(*Refer_TextContent)(nil),
		(*Refer_ImageContent)(nil),
		(*Refer_AudioContent)(nil),
		(*Refer_VideoContent)(nil),
	}
	file_packet_proto_msgTypes[13].OneofWrappers = []any{
		(*ApiResult_LoginReply)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_packet_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_packet_proto_goTypes,
		DependencyIndexes: file_packet_proto_depIdxs,
		MessageInfos:      file_packet_proto_msgTypes,
	}.Build()
	File_packet_proto = out.File
	file_packet_proto_rawDesc = nil
	file_packet_proto_goTypes = nil
	file_packet_proto_depIdxs = nil
}
