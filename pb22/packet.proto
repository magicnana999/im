/*

╰$ cd broker/pb
╰$ protoc --go_out=. packet.proto
╰$ protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative packet.proto
*/

syntax = "proto3";

package pb;

//import "google/protobuf/any.proto";
//import "google/protobuf/empty.proto";


option go_package = "../api";


message Packet{
  int32 type = 1;
  oneof body{
    HeartbeatBody heartbeatBody = 2;
    CommandBody commandBody = 3;
    MessageBody messageBody = 4;
  }
}

message HeartbeatBody{
  int32 value = 1;
}

message CommandBody {
  string id = 1;
  string cType = 2;
  int32 code = 3;
  string message = 4;
  oneof request {
    LoginRequest loginRequest = 5;
    LogoutRequest logoutRequest = 6;

    FriendRequest friendRequest = 7;
    FriendRequestAgree friendRequestAgree = 8;
    FriendRequestReject friendRequestReject = 9;


  }
  oneof reply {
    LoginReply loginReply = 10;
  }
}




/////////////////
message MQMessage{
  string id = 1;
  int32 count = 2;
  repeated int64 userIds = 3;
  repeated string userLabels = 4;
  MessageBody message = 5;
}
//////////////////////////////////////

message ApiResult{
  int32 code = 1;
  string message = 2;
  oneof data {
    LoginReply loginReply = 3;
  }
}





message LoginRequest {
  string appId = 1;
  string userSig = 2;
  string version = 3;
  string os = 4;
  string deviceId = 5;
}

message LoginReply{
  string appId = 1;
  int64 userId = 2;
}

message LogoutRequest {
  string appId = 1;
  int64 userId = 2;
}


service UserApi {
  rpc Login (LoginRequest) returns (ApiResult) {}
  rpc Logout (LogoutRequest) returns (ApiResult) {}
}



message FriendRequest {
  string appId = 1;
  int64 userId = 2;
  int64 to = 3;
  string message = 4;
}

message FriendRequestAgree {
  string appId = 1;
  int64 userId = 2;
  int64 to = 3;
  string message = 4;
}

message FriendRequestReject {
  string appId = 1;
  int64 userId = 2;
  int64 to = 3;
  string message = 4;
}

service FriendApi{
  rpc AddRequest(FriendRequest) returns (ApiResult) {}
  rpc AgreeRequest(FriendRequestAgree) returns (ApiResult) {}
  rpc RejectRequest(FriendRequestReject) returns (ApiResult) {}
}


